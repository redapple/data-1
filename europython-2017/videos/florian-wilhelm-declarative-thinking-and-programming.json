{
  "description": "Declarative Programming is a programming paradigm that focuses on\ndescribing what should be computed in a problem domain without\ndescribing how it should be done.  The talk starts by explaining\ndifferences between a declarative and imperative approach with the\nhelp of examples from everyday life. Having established a clear\nnotion of declarative programming as well as pointed out some\nadvantages, we transfer these concepts to programming in general. For\nexample, the usage of control flow statements like loops\nover-determine the order of computation which impedes scalable\nexecution as well as it often violates the single level of\nabstraction principle.\n\nFollowing the theoretical part of the talk, some practical examples\nare given how declarative programming can be applied easily within\nPython. This comprises the advantages and disadvantages of using a\nconfiguration file, e.g. config.yaml, versus a Python configuration\nmodule, e.g. setup.py. Furthermore, the benefits of avoiding\nstatements of control flow with the help of list and dictionary\ncomprehensions as well as sets are demonstrated.\n\nThe talk is concluded by a short, high-level excursion to a logistic\nprogramming language, namely PyDatalog in order to build the bridge\nbetween logistic and declarative programming. This is accomplished by\nshowing how a mathematical crossword can be easily solved with the\nhelp of declarative and logistic programming.",
  "duration": 1753,
  "recorded": "2017-07-13",
  "speakers": [
    "Florian Wilhelm"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/3QtAlB3NZII/hqdefault.jpg",
  "title": "Declarative Thinking and Programming",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=3QtAlB3NZII"
    }
  ]
}
