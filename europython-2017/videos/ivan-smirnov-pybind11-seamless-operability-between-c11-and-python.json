{
  "description": "`pybind11 <https://github.com/pybind/pybind11>`_ is a lightweight\nheader-only C++11 library that exposes C++ types to Python and vice\nversa and allows creating Python extension modules with minimum\nboilerplate by leveraging compile-time introspection and type\ninference. While this library's goals and some of the  syntax may be\nconsidered similar to Boost.Python, it has a much smaller footprint,\nis entirely self-contained, and offers additional features like\ndirect support for NumPy arrays.\n\nIn this talk, we will look at how to write Python extension modules\nin C++ from scratch with pybind11, starting from simple bindings and\nbuilding up to more complex examples that deal with iterators, STL\ndata structures, NumPy types and Python callbacks. We will also touch\nupon some of the internal machinery of the library like the virtual\ncall mechanism and reference counting.",
  "duration": 2279,
  "recorded": "2017-07-14",
  "speakers": [
    "Ivan Smirnov"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/jQedHfF1Jfw/hqdefault.jpg",
  "title": "pybind11 - seamless operability between C++11 and Python",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=jQedHfF1Jfw"
    }
  ]
}
