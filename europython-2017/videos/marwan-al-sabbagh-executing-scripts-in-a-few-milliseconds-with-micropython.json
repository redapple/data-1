{
  "description": "Command execution time can become important in a number of\napplications. Commands executed in command-line completion need to\nexecute in less then 100ms or users will perceive a delay. In Shell\nscripting one might want to execute commands repeatedly in a for loop\nand fast execution times makes this more feasible.\n\nPython is a very powerful language but has a much slower startup time\ncompared to other interpreted languages like Perl, Lua and Bash. It\ncan take up to 10 times longer to startup then some of these other\nlanguages.\n\nMicroPython was written as a lean implementation of Python 3 with a\nsmall subset of the standard library mainly intended to run on\nmicrocontrollers. But it happily runs on Unix systems with excellent\nstartup performance, making it an ideal candidate for implementing\ncertain time sensitive commands.\n\nThis talk will:\n\n- Explain when achieving fast execution times matters and when it doesn\u2019t.\n- Present two different approaches to measuring command execution\n  time, one simple and the other more detailed and accurate.\n- Compare execution times of a simple set of scripts that add two\n  numbers in an number of different interpreted languages (micropython,\n  python3, awk, perl, lua, bash).\n- Present an example use case of MicroPython on Unix. Bash completion\n  for pip install that completes the names of available packages live\n  from a remote pypi mirror.\n- Demonstrate the auto completion script with pip on a local pypi mirror.",
  "duration": 2017,
  "recorded": "2017-07-14",
  "speakers": [
    "Marwan Al"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/lEaUVGi1iKk/hqdefault.jpg",
  "title": "Sabbagh - Executing scripts in a few milliseconds with MicroPython",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=lEaUVGi1iKk"
    }
  ]
}
