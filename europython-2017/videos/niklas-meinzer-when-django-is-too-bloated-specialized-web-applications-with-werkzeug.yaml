description: |-
  Did you ever think, Django and all the other “batteries included”
  frameworks are not flexible enough for your needs? Do you feel like
  they limit you in your creativity and design? Then this talk is for
  you!

  Werkzeug is a very lightweight HTTP/WSGI utility for Python. You
  might have actually used it before, since the popular framework Flask
  is based on it.

  Werkzeug handles the WSGI communication with the web server and
  parsing of HTTP packets for you, after that, you are left to do
  whatever you want. No pre-defined ORM, no request dispatching or
  template rendering.

  As a developer you are supported with a live debugger that runs in
  the browser and a great variety of testing tools making it easy to
  write fine grained unit tests for your application.

  As a developer at MPS - Medical Systems, I work with Werkzeug on a
  daily basis. One of our products is ChemoCompile,  a chemo therapy
  planning, management and documentation tool used in hospitals in
  various European countries. It is a single-page web application
  written in Python (backend) and AngularJS (frontend). When we created
  it, we first prototyped it using Django, but soon realized, that we
  did not need most of the functionality that Django provides and many
  of our needs, like interfacing with hospital information systems, are
  too much out of the scope of a regular web applications. I will talk
  about, how we then discovered Werkzeug and built our own very
  customized stack on top of it and how you can do it too!

duration: 1749
recorded: '2017-07-13'
speakers:
- Niklas Meinzer
thumbnail_url: https://i.ytimg.com/vi/mXpBuELtpro/hqdefault.jpg
title: When Django is too bloated - Specialized Web-Applications with Werkzeug
videos:
- type: youtube
  url: https://www.youtube.com/watch?v=mXpBuELtpro

