{
  "description": "Python was never intended as a fast language but many modern uses of\nPython require high performance computing, particularly in data\nscience. This talk explores your options for squeezing maximum\nperformance out of critical Python code.\n\nThis talk provides a succinct summary of the options you have: C\nextensions, Cython, CFFI, PyPy and many others. It also shows the\ntrade-offs between execution performance and the cost of writing and\nmaintaining code with each choice. Each option is also explored for\nmaturity and ease of use for Python programmers. A real world\nprogramming problem is coded and benchmarked using each of these\ntechniques. All the code used in the talk is available on GitHub.\n\nAt the end of this talk you will be better place to decide on which\ntechnique to use to make your code run 100x faster.",
  "duration": 2553,
  "recorded": "2017-07-13",
  "speakers": [
    "Paul Ross"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/5js_-pLGqwA/hqdefault.jpg",
  "title": "A faster Python? You Have These Choices",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=5js_-pLGqwA"
    }
  ]
}
