{
  "description": "Did you ever think, Django and all the other \u201cbatteries included\u201d\nframeworks are not flexible enough for your needs? Do you feel like\nthey limit you in your creativity and design? Then this talk is for\nyou!\n\nWerkzeug is a very lightweight HTTP/WSGI utility for Python. You\nmight have actually used it before, since the popular framework Flask\nis based on it.\n\nWerkzeug handles the WSGI communication with the web server and\nparsing of HTTP packets for you, after that, you are left to do\nwhatever you want. No pre-defined ORM, no request dispatching or\ntemplate rendering.\n\nAs a developer you are supported with a live debugger that runs in\nthe browser and a great variety of testing tools making it easy to\nwrite fine grained unit tests for your application.\n\nAs a developer at MPS - Medical Systems, I work with Werkzeug on a\ndaily basis. One of our products is ChemoCompile,  a chemo therapy\nplanning, management and documentation tool used in hospitals in\nvarious European countries. It is a single-page web application\nwritten in Python (backend) and AngularJS (frontend). When we created\nit, we first prototyped it using Django, but soon realized, that we\ndid not need most of the functionality that Django provides and many\nof our needs, like interfacing with hospital information systems, are\ntoo much out of the scope of a regular web applications. I will talk\nabout, how we then discovered Werkzeug and built our own very\ncustomized stack on top of it and how you can do it too!",
  "duration": 1749,
  "recorded": "2017-07-13",
  "speakers": [
    "Niklas Meinzer"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/mXpBuELtpro/hqdefault.jpg",
  "title": "When Django is too bloated - Specialized Web-Applications with Werkzeug",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=mXpBuELtpro"
    }
  ]
}
