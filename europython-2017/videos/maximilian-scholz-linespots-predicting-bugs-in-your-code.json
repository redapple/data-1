{
  "description": "In times of increased awareness of technical debts, reviewing and\nauditing code becomes more important. The main problem with code\nreview is the amount of time that is being spent searching the needle\nin the haystack. You just don\u2019t know what you are looking for and\nwhere to find it. One possible solution to the problem to the idea of\nbug prediction. If we could somehow know where bugs are in our code,\nfocusing reviewing efforts on that area should, in theory, increase\nthe effectiveness of our review. More bugs should be uncovered while\nless time is spent reviewing.\n\nThis is what Linespots tries to offer. It is an algorithm developed\nduring my thesis that analyses a project\u2019s history and calculates a\nprobability value for each line of code in the project, representing\nthe likeliness of a bug existing in that line.\n\nUsing the probabilities, reviewers can focus on the areas that are at\na higher risk of containing bugs and spend less time on robust code.\n\nThe research done so far showed, that by analyzing 0.5% lines of code\nwith the highest risk values in a project, an average of 50% of the\nbugs fixed in the next 150 commits were correctly predicted by\nLinespots. This is an improvement by factor 10 compared to Bugspots,\nan algorithm developed at Google, which Linespots is based upon.\n\nOutline:\n\n- Basics and functionality of Linespots\n- Research results\n- Pros and cons of Linespots\n- Results of a case study",
  "duration": 1556,
  "recorded": "2017-07-14",
  "speakers": [
    "Maximilian Scholz"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/Zkn_knMZAlo/hqdefault.jpg",
  "title": "Linespots: Predicting Bugs in your Code",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=Zkn_knMZAlo"
    }
  ]
}
