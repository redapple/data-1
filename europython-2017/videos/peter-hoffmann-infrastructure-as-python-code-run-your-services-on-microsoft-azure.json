{
  "description": "Using Infrastructure-as-Code principles with configuration through\nmachine processable definition files in combination with the adoption\nof cloud computing provides faster feedback cycles in\ndevelopment/testing and less risk in deployment to production. The\nMicrosoft Azure Cloud (https://azure.microsoft.com/) allows different\nways to provision, deploy and run your python  service:\n\nThe Azure Resource Manger Templates\n(https://azure.microsoft.com/en-us/resources/templates/) allows you\nto provision your application using a declarative template. With\nparameters, variables and Azure template functions, the same template\ncan be used to deploy your application in different stages (dev,\ntest, production) and environments for different customers. We open\nsourced the tropo library (https://pypi.python.org/pypi/tropo/) to\ncreate Azure Resource Templates from python.\n\nAzure SDK for Python (http://azure-sdk-for-python.readthedocs.io) for\na low level access to manage resources in the Azure Cloud.\n\nAn Azure Ansible Module\n(https://docs.ansible.com/ansible/guide_azure.html) based on the\nAzure SDK to automate software provisioning, configuration\nmanagement, and application deployment in a single environment.\n\nEach of the alternatives has different strengths and drawbacks.\nPresenting our learnings from migrating our infrastructure into the\nAzrue Cloud will help to avoid common pitfalls and show deployment\npatterns that will ease the live of devops.",
  "duration": 1764,
  "recorded": "2017-07-11",
  "speakers": [
    "Peter Hoffmann"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/w3eCVRsY0Hw/hqdefault.jpg",
  "title": "Infrastructure as Python Code: Run your Services on Microsoft Azure",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=w3eCVRsY0Hw"
    }
  ]
}
